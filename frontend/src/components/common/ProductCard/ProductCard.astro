---
import TextIndicatingBenefits from "../TextIndicatingBenefits/TextIndicatingBenefits.astro";
import AButton from "../../ui/Buttons/AButton.astro";
import ABigIllustrations from "../../ABigIllustrations.astro";
import ATag from "../../ui/ATag/ATag.astro";

interface Condition {
	startText: string;
	beforeText: string;
	text: string;
	afterText: string;
	currency: string;
	description: string;
}

interface Link {
	text: string;
	href: string;
}

interface Props {
	class?: string;
	title: string;
	description: string;
	symbolId?: string;
	imgSrc?: string;
	conditions?: Condition[];
    additionalConditions?: Condition[];
	links?: Link[]
	tagText?: string;
	textButton?: string;
}

const {
	class: classList,
	title,
	description,
	symbolId,
	conditions = [],
    additionalConditions = [],
	links = [],
	tagText,
	textButton,
	imgSrc,
	...rest
} = Astro.props as Props;

const useTag = !!tagText;
---

<div
	class:list={[
		'product-card',
		{'product-card--use-tag': useTag},
		classList
	]}
	{...rest}
>
	<div class="product-card__image-container">
		{
			imgSrc && (
				<img src={imgSrc} class="product-card__image" />
			)
		}
		{
			symbolId && (
				<ABigIllustrations class="product-card__illustrations" symbolId={symbolId} />
			)
		}
	</div>
	{
		tagText && (
			<div class="product-card__tag">
				<ATag>{tagText}</ATag>
			</div>
		)
	}
	<div class="product-card__content">
		<div class="product-card__head">
			<div class="product-card__title headline-1" set:html={title}></div>
			{
				description && (
					<div class="product-card__description body-l-light" set:html={description}></div>
				)
			}
		</div>
		{
			conditions.length > 0 && (
                <div class="product-card__conditions-box">
                    <div class:list={[
                        'product-card__conditions',
                        {'is-big-gap': conditions.length <= 3}
                    ]}>
                        {
                            conditions?.map((item) => (
                                <TextIndicatingBenefits
                                    startText={item.startText}
                                    beforeText={item.beforeText}
                                    text={item.text}
                                    afterText={item.afterText}
                                    currency={item.currency}
                                >
                                    {
                                        item.description && (
                                            <div class="body-m-light dark-70">{item.description}</div>
                                        )
                                    }
                                </TextIndicatingBenefits>
                            ))
                        }
                    </div>
                    {
                        additionalConditions.length > 0 && (
                            <div class:list={[
                                'product-card__additional-conditions',
                                {'is-big-gap': additionalConditions.length <= 3}
                            ]}>
                                {
                                    additionalConditions?.map((item) => (
                                        <TextIndicatingBenefits
                                            startText={item.startText}
                                            beforeText={item.beforeText}
                                            text={item.text}
                                            afterText={item.afterText}
                                            currency={item.currency}
                                        >
                                            {
                                                item.description && (
                                                    <div class="body-m-light dark-70">{item.description}</div>
                                                )
                                            }
                                        </TextIndicatingBenefits>
                                    ))
                                }
                            </div>
                        )
                    }
                </div>
			)
		}
		<div class="product-card__buttons">
			<slot name="buttons">
				{
					textButton && (
						<AButton color="green" size="lm">{textButton}</AButton>
					)
				}
				<AButton element="a" href="#" size="lm" afterIcon="icon-chevron-right" text>Подробнее</AButton>
			</slot>
		</div>
	</div>
</div>

<style lang="scss" is:global>
	@import "@styles/media-queries";

	.product-card {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		border-radius: 0.75rem;
		padding: 2.5rem 1rem 2.5rem 1rem;
		background-color: var(--dark-10);

		&__image-container {
			flex-shrink: 0;
			height: 16rem;
			width: 100%;
			order: 1;

			@include use-media(tablet) {
				height: 20rem;
			}

			@include use-media(tablet-album) {
				height: 22.5rem;
				width: 22.5rem;
				order: unset;
			}

			@include use-media(laptop-x) {
				width: 28.75rem;
				height: 28.75rem;
			}
		}

		&__image {
			width: 100%;
			height: 100%;
			object-fit: contain;
		}

		&__illustrations {
			width: 100%;
			height: 100%;
		}

		&__tag {
			order: 0;

			@include use-media(tablet-album) {
				order: unset;
			}
		}

		&__content {
			display: flex;
			flex: 1;
			flex-direction: column;
			gap: 2.5rem;
			order: 2;

			@include use-media(tablet-album) {
				gap: 4rem;
				order: unset;
			}
		}

		&__head {
			display: flex;
			flex-direction: column;
			gap: 1.5rem;

			@include use-media(tablet-album) {
				gap: 2.5rem;
			}
		}

		&__title {
			hyphens: auto;

			br {
				display: none;

				@include use-media(tablet) {
					display: block;
				}
			}
		}

        &__conditions-box {
            display: flex;
            flex-direction: column;
            row-gap: 1.5rem;

            @include use-media(tablet) {
                column-gap: 2.5rem;
                row-gap: 2.5rem;
            }

            @include use-media(tablet-album) {
                column-gap: 5rem;
            }
        }

		&__conditions, &__additional-conditions {
			display: flex;
			flex-direction: column;
			row-gap: 1.5rem;
			flex-wrap: wrap;

			.text-indicating-benefits {
				min-width: 15rem;

				@include use-media(tablet-album) {
					min-width: unset;
				}
			}

			@include use-media(tablet) {
				flex-direction: row;
				column-gap: 2.5rem;
				row-gap: 2.5rem;
			}

			@include use-media(tablet-album) {
				column-gap: 5rem;
			}

			@include use-media(laptop-x) {
				&.is-big-gap {
					column-gap: 7.5rem;
				}
			}
		}

		&__links {
			display: flex;
			flex-direction: column;
			list-style: none;
			margin: 0;
			padding: 0;
		}

		&__link {
			padding: 1.5rem 0;
			border-bottom: 1px solid var(--blue-30);

			.a-button {
				width: 100%;
				justify-content: space-between;
			}

			&:first-child {
				padding-top: 0;
			}

			&:last-child {
				border-bottom: unset;
				padding-bottom: 0;
			}
		}

		&__buttons {
			display: flex;
			flex-direction: column;
			gap: 2rem;

			@include use-media(tablet) {
				flex-direction: row;
			}

			@include use-media(tablet-album) {
				gap: 2.5rem;
			}
		}

		@include use-media(tablet) {
			gap: 2.5rem;
			padding: 4rem 2.5rem;
		}

		@include use-media(tablet-album) {
			flex-direction: row;
			padding: 5rem 2.5rem;
		}

		@include use-media(laptop-x) {
			column-gap: 5rem;
		}
	}

	.product-card.product-card--use-tag {
		.product-card {
			&__image-container {
				flex-shrink: unset;

				@include use-media(tablet-album) {
					grid-row: 1 / 3;
				}
			}

			&__content {
				@include use-media(tablet-album) {
					grid-column: 2 / 3;
				}
			}
		}

		@include use-media(tablet-album) {
			display: grid;
			grid-template-columns: min-content 1fr;
			grid-template-rows: min-content 1fr;
			row-gap: 1.25rem;
		}
	}

</style>
