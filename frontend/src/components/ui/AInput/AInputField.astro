---
import AIcon from "../../AIcon.astro";
type Validations = "notEmpty" | "isEmail" | "isPhone";
type Masks = "phone";
type Size = "m" | "s";

interface Props {
    className?: string;
    class?: string;
    placeholder?: string;
    disabled?: boolean;
    name?: string;
    value?: string;
    label?: string;
    validations?: Validations[];
    mask?: Masks;
    forId?: string;
    hint?: string;
    required?: boolean;
    size: Size;
    beforeIcon?: string,
    afterIcon?: string,
}

const {
    class: className,
    placeholder,
    label,
    disabled,
    name,
    beforeIcon,
    afterIcon,
    value,
    validations,
    mask,
    forId,
    hint,
    required,
    size = 'ms',
    ...rest
} = Astro.props;
---

<div
        class="a-input-field js-a-input"
        class:list={
            [
                className,
                {'a-input-field--required': required},
                `a-input-field--size-${size}`
            ]
        }
        {...rest}
>
    { label && (<label for={forId} class="a-input-field__label body-s-heavy">{label}</label>)}
    <div class="a-input-field__wrapper">
        { beforeIcon && (
                <AIcon symbolId={beforeIcon} class="a-input-field__icon" />
        )
        }
        <input
            id={forId}
            class="a-input-field__input"
            placeholder={placeholder}
            disabled={disabled}
            name={name}
            value={value}
            data-validations={validations}
            data-mask={mask}
            aria-describedby=`${forId + '-hint'}`
        />
        { afterIcon && (
                <AIcon symbolId={afterIcon} class="a-input-field__icon" />
        )
        }
    </div>
    { hint && (<small class="a-input-field__hint js-a-input-hint caption-m" id=`${forId + '-hint'}`>{hint}</small>)}
</div>

<script>
	//Пример использования. В будущем перенести отсюда или использовать только в формах
	// import initAInput from "./index";
	// import { JS_CLASSES } from "./index";
	//
	// const inputs: NodeListOf<HTMLElement> = document.querySelectorAll(JS_CLASSES.root);
	//
	// inputs.forEach((inputWrapper: HTMLElement) => {
	// 	const aInput = initAInput(inputWrapper);
	//
	// 	aInput.input.addEventListener("validate", (evt) => {
	// 		console.log("Валдация", evt);
	// 	});
	//
	// 	// Для вызова валидации инпута. Например когда пользователь сразу жмет кнопку отправить в форме
	// 	// aInput.validate();
	// });
</script>

<style lang="scss" is:global>
    @use "sass:map";
    @import "@styles/variables.scss";
    @import "@styles/media-queries";
    @import "@styles/functions.scss";
    @import "@styles/placeholders.scss";

    .a-input-field {
        display: flex;
        flex-direction: column;
        gap: .5rem;

        &__label {
            color: var(--dark-70);
        }

        &__input {
            @extend %reset-input;
            display: inline-block;
            width: 100%;
            min-width: 0;

            color: inherit;
            font-family: inherit;

            &::placeholder {
                color: var(--dark-70);
            }

            &:disabled {
                cursor: not-allowed;
                border-color: transparent;
                background-color: var(--dark-10);
            }

            &:focus {
                outline: none;
                border-color: var(--purple-70);
            }

            &:enabled:hover {
                border-color: var(--purple-70);
            }
        }

        &__hint {
            color: var(--dark-70);
        }

        &__wrapper {
            display: flex;
            align-items: center;
            gap: 1rem;

            border: 1px solid var(--purple-30);
            border-radius: 0.25rem;
            background-color: inherit;
        }

        &__icon {
            flex-shrink: 0;
            width: 1.5rem;
            height: 1.5rem;
            color: var(--violet-70);
        }

        &--required {
            .a-input-field__label {
                &::after {
                    content: '*';
                    display: inline-block;
                    margin-left: 4px;
                    color: var(--orange-100);
                }
            }
        }

        &--size-m {
            .a-input-field__input {
                font-size: 1rem;
                line-height: 150%;
            }

            .a-input-field__wrapper {
                padding: calc(1rem - 1px); // 1px - border
            }
        }

        &--size-s {
            .a-input-field__input {
                font-size: 0.875rem;
                line-height: 130%;
            }

            .a-input-field__wrapper {
                padding: 0.625rem 1rem;
            }

            .a-input-field__icon {
                width: 1rem;
                height: 1rem;
            }
        }
    }
</style>
