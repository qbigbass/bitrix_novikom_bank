---
import AIcon from "../../AIcon.astro";
import ADropDown from "../ADropDown/ADropDownMenu/ADropDownMenu.astro";
import AInputHint from "../AInputHint/AInputHint.astro";
type Size = "m" | "s" | "ms";

interface Props {
	className?: string;
	placeholder?: string;
	disabled?: boolean;
	name?: string;
	value?: string;
	label?: string;
	hint?: string;
	required?: boolean;
	size: Size;
}

const {
	class: className,
	placeholder,
	label,
	disabled,
	name,
	value,
	hint,
	required,
	size = 'ms',
	...rest
} = Astro.props;
---

<div
	class="a-currency-input js-a-currency-input"
	class:list={
		[
			className,
			{'a-currency-input--required': required},
			`a-currency-input--${size}`
		]
	}
	{...rest}
>
	{ label && (<label for={name} class="a-currency-input__label body-s-heavy">{label}</label>)}

	<div class="a-currency-input__inner js-a-currency-input-inner">
		<input
			id={name}
			class="a-currency-input__input"
			placeholder={placeholder}
			disabled={disabled}
			name={name}
			value={value}
			aria-describedby=`${name + '-hint'}`
		/>
		<button class="a-currency-input__button js-a-currency-input-button" type="button">
			<span class="a-currency-input__button-text js-a-currency-input-button-text"></span>
			<AIcon class="a-currency-input__button-icon" symbolId="icon-chevron-down" size="s" />
		</button>
	</div>
    <ADropDown class="a-currency-input__drop-down">
        <slot />
    </ADropDown>
	{
        hint && (
            <AInputHint id={`${name}`}>
                { hint }
            </AInputHint>
        )
    }
</div>

<style lang="scss" is:global>
	@use "sass:map";
	@import "@styles/variables.scss";
	@import "@styles/functions.scss";
	@import "@styles/placeholders.scss";

	.a-currency-input {
        $root: #{&};
		display: flex;
		flex-direction: column;
        gap: 0.5rem;

		&__inner {
			position: relative;
			display: flex;
		}

		&__label {
			color: var(--dark-70);
		}

		&__button {
			display: flex;
			background-color: transparent;
			align-items: center;
			justify-content: center;
			gap: 0.5rem;
			border: 1px solid var(--purple-30);
			border-radius: 0 0.25rem 0.25rem 0;
			cursor: pointer;
			font-size: inherit;

			&:focus {
				outline: none;
			}

			&:disabled {
				cursor: not-allowed;
			}
		}

		&__input {
            display: inline-block;
            width: 100%;
            min-width: 0;
            border: 1px solid var(--purple-30);
			border-radius: 0.25rem 0 0 0.25rem;
			border-right: 0;
            background-color: inherit;
            color: inherit;
            font-family: inherit;

            &::placeholder {
                color: var(--dark-70);
            }

            &:disabled {
                cursor: not-allowed;
                border-color: transparent;
                background-color: var(--dark-10);
            }

            &:focus {
                outline: none;
                border-color: var(--purple-70);
            }

            &:enabled:hover {
                border-color: var(--purple-70);
            }
		}

		&__input:disabled ~ &__button {
			pointer-events: none;
			cursor: not-allowed;
			border-color: transparent;
			border-left: 1px solid var(--dark-50);
			background-color: var(--dark-10);
		}

		&__input:enabled:hover ~ &__button {
			border-color: var(--purple-70);
		}

		&__input:focus ~ &__button {
			border-color: var(--purple-70);
		}

		&__button-icon {
			color: var(--violet-70);
		}

		&#{$root}--m {
            #{$root}__input {
                padding: calc(1rem - 1px); // 1px - border
                font-size: 1rem;
                line-height: 150%;
            }

            #{$root}__button {
				padding: 0.938rem 0.938rem 0.938rem 0.438rem;
			}
		}

		&#{$root}--s {
            #{$root}__input {
                padding: 0.625rem 1rem;
                font-size: 0.875rem;
                line-height: 130%;
            }

            #{$root}__button {
				padding: 0.625rem 0.438rem 0.625rem 0.438rem;
			}
		}

		&#{$root}--ms {
            #{$root}__input {
                padding: 0.625rem 1rem;
                font-size: 0.875rem;
                line-height: 130%;

                @include use-media(tablet-album) {
                    padding: calc(1rem - 1px); // 1px - border
                    font-size: 1rem;
                    line-height: 150%;
                }
            }

            #{$root}__button {
				padding:
					calc-clamp(0.563rem, 0.938rem, map.get($mq-breakpoints, laptop-x))
					calc-clamp(0.563rem, 0.938rem, map.get($mq-breakpoints, laptop-x))
					calc-clamp(0.563rem, 0.938rem, map.get($mq-breakpoints, laptop-x))
					0.438rem;
			}
		}

        &#{$root}--required {
            #{$root}__label {
                &::after {
                    content: '*';
                    display: inline-block;
                    margin-left: 4px;
                    color: var(--orange-100);
                }
            }
        }

		&.is-open {
            #{$root}__button-icon {
				transform: rotate(-180deg);
			}
		}
	}
</style>
