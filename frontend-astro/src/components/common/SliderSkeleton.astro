---
import SliderControls from './Sliders/common/SliderControls/SliderControls.astro'

interface Props {
	class?: string,
	['data-space-between']?: string
	['data-slides-per-view']?: string
	['data-active-on-mq']?: string
}

const {
	class: className,
	['data-space-between']: spaceBetween = 'mobile:0,tablet:16,laptop:24',
	['data-slides-per-view']: slidesPerView = 'mobile:1,tablet:2,laptop:3',
	['data-active-on-mq']: activeOnMq = 'tablet',
	...rest
} = Astro.props as Props;

---

<div class="swiper slider-skeleton js-slider"
     data-slides-per-view={slidesPerView}
     data-space-between={spaceBetween}
     data-active-on-mq={activeOnMq}
     class:list={[className]} {...rest}>
	<div class="swiper-wrapper js-swiper-wrapper">
		<slot>
			<div class="swiper-slide">Slide 1</div>
			<div class="swiper-slide">Slide 2</div>
			<div class="swiper-slide">Slide 3</div>
		</slot>
	</div>
	<div class="slider-skeleton__controls">
		<SliderControls></SliderControls>
	</div>
</div>

<script>
	import Swiper from 'swiper';
	import { Navigation, Pagination } from 'swiper/modules';
	import type { SwiperOptions } from 'swiper/types';
	import type { SwiperContainer } from 'swiper/element';
	import { MEDIA_QUERIES } from '@js/constants';
	import { useMatchMedia, isMatchMedia } from '../../js/utils.js'

	import 'swiper/css';

	const dataAttrValueSeparators = {
		mediaQuery: ':',
		listItem: ','
	}

	const defaultSliderOptions: { [key: string] : any } = {
		modules: [Navigation, Pagination],
		slidesPerView: 'auto',
		spaceBetween: 16,
		breakpoints: {},
	};

	const ELEMENTS = {
		root: '.js-slider',
		swiperWrapper: '.js-swiper-wrapper',
		controls: '.js-slider-controls'
	}

	const SWIPER_ELEMENTS_CLASSES = {
		wrapper: 'swiper-wrapper',
		slide: 'swiper-slide',
		navigation: {
			prevEl: '.swiper-button-prev',
			nextEl: '.swiper-button-next',
			navigationDisabledClass: 'swiper-nav-disabled'
		},
		pagination: {
			el: '.slider-controls__pagination',
			type: 'bullets',
			clickable: true,
		}
	};

	const findSliders = (slidersSelector: string) => {
		const sliders: NodeListOf<HTMLElement> = document.querySelectorAll(slidersSelector);
		return sliders.length ? sliders : false;
	};

	const makeSliderOptions = (sliderRootElement: HTMLElement, defaultOptions = defaultSliderOptions): SwiperOptions => {
		const dataAttrs = Object.entries(sliderRootElement.dataset);
		const options = {...defaultOptions};

		if (dataAttrs.length) {
			for (const [key, value] of dataAttrs) {
				if (options[key] && value) {
					const hasBreakpointValues = value.split(dataAttrValueSeparators.mediaQuery);

					if (hasBreakpointValues.length > 1) {
						const breakpoints = value.split(dataAttrValueSeparators.listItem);

						breakpoints.forEach((breakpoint) => {
							const [mqKey, mqValue] = breakpoint.split(dataAttrValueSeparators.mediaQuery);
							if (MEDIA_QUERIES[mqKey]) {
								const swiperOptionsBreakpoint = Number.parseInt(MEDIA_QUERIES[mqKey]);
								const swiperOptionsBreakpointValues = { ...options.breakpoints[swiperOptionsBreakpoint]};

								let payload = {
									...swiperOptionsBreakpointValues, [key]: mqValue
								};

								if (key === 'slidesPerView') {
									payload = {...payload, ...initSliderControls(mqValue, sliderRootElement)}
								}

								options.breakpoints[swiperOptionsBreakpoint] = payload;
							}
						})
					} else {
						options[key] = value;
					}
				}
			}
		}

		return options as SwiperOptions;
	}

	const getSlidesWrapper = (sliderRootElement: HTMLElement) => {
		return {
			slidesWrapper: sliderRootElement.querySelector(ELEMENTS.swiperWrapper),
			slidesWrapperClass: SWIPER_ELEMENTS_CLASSES.wrapper
		}
	}
	/**
	 * Убить swiper и удалить класс SWIPER_WRAPPER_CLASS чтобы избавиться от стилей этого класса
	 * @param sliderRootElement {SwiperContainer} элемент в котором инициализируется слайдер
	 */
	const destroySwiper = (sliderRootElement: SwiperContainer) => {
		const { slidesWrapper, slidesWrapperClass} = getSlidesWrapper(sliderRootElement);
		sliderRootElement.swiper?.destroy();
		slidesWrapper && slidesWrapper.classList.remove(slidesWrapperClass);
	}

	/**
	 * @param breakpointName {string} ключ объекта MEDIA_QUERIES из constants
	 * @param sliderRootElement {HTMLElement} элемент в котором инициализируется слайдер
	 */
	const initOnMqBreakpoint = (breakpointName: string, sliderRootElement: HTMLElement) => {
		useMatchMedia(breakpointName, (isMatch: boolean) => {
			if (isMatch) {
				const { slidesWrapper, slidesWrapperClass} = getSlidesWrapper(sliderRootElement);
				slidesWrapper && slidesWrapper.classList.add(slidesWrapperClass);
				initSlider(sliderRootElement);
			} else {
				destroySwiper(sliderRootElement as SwiperContainer);
			}
		});
	}

	const getSlidesLength = (sliderRootElement: HTMLElement) => {
		const { slidesWrapper } = getSlidesWrapper(sliderRootElement);
		return slidesWrapper?.children.length;
	}

	const initSliderControls = (mqValue: string,  sliderRootElement: HTMLElement) => {
		const { navigation, pagination } = SWIPER_ELEMENTS_CLASSES;
		const slidesLength = getSlidesLength(sliderRootElement);
		if (!slidesLength) {
			return {}
		}

		// TODO: Hide and disable if activeOnMq breakpoint is not matched

		return {
			navigation: {
				...navigation,
				enabled: slidesLength > Number(mqValue)
			},
			pagination: {
				...pagination,
				enabled: slidesLength > Number(mqValue)
			}
		}
	}

	/**
	 * @param sliderRootElement {HTMLElement}
	 */
	const initSlider = (sliderRootElement: HTMLElement) => {

		const { activeOnMq = '' }  = sliderRootElement.dataset as DOMStringMap;
		const sliderOptions = makeSliderOptions(sliderRootElement);
		const mqBreakpointExist = Boolean(activeOnMq && MEDIA_QUERIES[activeOnMq]);
		const isInitImmediately = mqBreakpointExist && isMatchMedia(activeOnMq) || !mqBreakpointExist;

		// если есть атрибут data-active-on-mq
		// нужно чтобы слайдер запускался только указаном в атрибуте media query
		// иначе запустить отслеживание изменений media query
		// и запускать/уничтожать слайдер по условию
		if (isInitImmediately) {
			new Swiper(sliderRootElement, sliderOptions);
		} else if (mqBreakpointExist) {
			destroySwiper(sliderRootElement as SwiperContainer);
			initOnMqBreakpoint(activeOnMq, sliderRootElement);
		}
	}

	const sliders: NodeListOf<HTMLElement> | boolean = findSliders(ELEMENTS.root);

	if (sliders instanceof NodeList) {
		sliders.forEach(initSlider)
	}
</script>

<style lang="scss" is:global>
	.swiper-slide {
		box-sizing: border-box;
	}
</style>
